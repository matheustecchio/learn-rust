{"$message_type":"diagnostic","message":"missing expression to iterate on in `for` loop","code":null,"level":"error","spans":[{"file_name":"Fearless Concurrency/Using Message Passing to Transfer Data Between Threads/Sum All Numbers/src/main.rs","byte_start":676,"byte_end":676,"line_start":24,"line_end":24,"column_start":84,"column_end":84,"is_primary":true,"text":[{"text":"    for received in /* What should you iterate over to receive all the numbers? */ {","highlight_start":84,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try adding an expression to the `for` loop","code":null,"level":"help","spans":[{"file_name":"Fearless Concurrency/Using Message Passing to Transfer Data Between Threads/Sum All Numbers/src/main.rs","byte_start":676,"byte_end":676,"line_start":24,"line_end":24,"column_start":84,"column_end":84,"is_primary":true,"text":[{"text":"    for received in /* What should you iterate over to receive all the numbers? */ {","highlight_start":84,"highlight_end":84}],"label":null,"suggested_replacement":"/* expression */ ","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: missing expression to iterate on in `for` loop\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mFearless Concurrency/Using Message Passing to Transfer Data Between Threads/Sum All Numbers/src/main.rs:24:84\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for received in /* What should you iterate over to receive all the numbers? */ {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try adding an expression to the `for` loop\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    for received in /* What should you iterate over to receive all the numbers? */ \u001b[0m\u001b[0m\u001b[38;5;10m/* expression */ \u001b[0m\u001b[0m{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                    \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function takes 2 arguments but 1 argument was supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"Fearless Concurrency/Using Message Passing to Transfer Data Between Threads/Sum All Numbers/src/main.rs","byte_start":391,"byte_end":448,"line_start":18,"line_end":18,"column_start":12,"column_end":69,"is_primary":false,"text":[{"text":"    send_tx(vec![2,4,6,8,10], /* TODO: pass the transmitting end */);","highlight_start":12,"highlight_end":69}],"label":"argument #2 of type `Sender<u32>` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"Fearless Concurrency/Using Message Passing to Transfer Data Between Threads/Sum All Numbers/src/main.rs","byte_start":384,"byte_end":391,"line_start":18,"line_end":18,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    send_tx(vec![2,4,6,8,10], /* TODO: pass the transmitting end */);","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"Fearless Concurrency/Using Message Passing to Transfer Data Between Threads/Sum All Numbers/src/main.rs","byte_start":75,"byte_end":92,"line_start":5,"line_end":5,"column_start":12,"column_end":29,"is_primary":false,"text":[{"text":"fn send_tx(numbers: Vec<u32>, tx: mpsc::Sender<u32>) {","highlight_start":12,"highlight_end":29}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"Fearless Concurrency/Using Message Passing to Transfer Data Between Threads/Sum All Numbers/src/main.rs","byte_start":94,"byte_end":115,"line_start":5,"line_end":5,"column_start":31,"column_end":52,"is_primary":false,"text":[{"text":"fn send_tx(numbers: Vec<u32>, tx: mpsc::Sender<u32>) {","highlight_start":31,"highlight_end":52}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"Fearless Concurrency/Using Message Passing to Transfer Data Between Threads/Sum All Numbers/src/main.rs","byte_start":67,"byte_end":74,"line_start":5,"line_end":5,"column_start":4,"column_end":11,"is_primary":true,"text":[{"text":"fn send_tx(numbers: Vec<u32>, tx: mpsc::Sender<u32>) {","highlight_start":4,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"Fearless Concurrency/Using Message Passing to Transfer Data Between Threads/Sum All Numbers/src/main.rs","byte_start":391,"byte_end":448,"line_start":18,"line_end":18,"column_start":12,"column_end":69,"is_primary":true,"text":[{"text":"    send_tx(vec![2,4,6,8,10], /* TODO: pass the transmitting end */);","highlight_start":12,"highlight_end":69}],"label":null,"suggested_replacement":"(vec![2,4,6,8,10], /* Sender<u32> */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 2 arguments but 1 argument was supplied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mFearless Concurrency/Using Message Passing to Transfer Data Between Threads/Sum All Numbers/src/main.rs:18:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    send_tx(vec![2,4,6,8,10], /* TODO: pass the transmitting end */);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument #2 of type `Sender<u32>` is missing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mFearless Concurrency/Using Message Passing to Transfer Data Between Threads/Sum All Numbers/src/main.rs:5:4\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn send_tx(numbers: Vec<u32>, tx: mpsc::Sender<u32>) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    send_tx\u001b[0m\u001b[0m\u001b[38;5;10m(vec![2,4,6,8,10], /* Sender<u32> */)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"this function takes 2 arguments but 1 argument was supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"Fearless Concurrency/Using Message Passing to Transfer Data Between Threads/Sum All Numbers/src/main.rs","byte_start":461,"byte_end":517,"line_start":19,"line_end":19,"column_start":12,"column_end":68,"is_primary":false,"text":[{"text":"    send_tx(vec![1,3,5,7,9], /* TODO: pass the transmitting end */);","highlight_start":12,"highlight_end":68}],"label":"argument #2 of type `Sender<u32>` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"Fearless Concurrency/Using Message Passing to Transfer Data Between Threads/Sum All Numbers/src/main.rs","byte_start":454,"byte_end":461,"line_start":19,"line_end":19,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"    send_tx(vec![1,3,5,7,9], /* TODO: pass the transmitting end */);","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"Fearless Concurrency/Using Message Passing to Transfer Data Between Threads/Sum All Numbers/src/main.rs","byte_start":75,"byte_end":92,"line_start":5,"line_end":5,"column_start":12,"column_end":29,"is_primary":false,"text":[{"text":"fn send_tx(numbers: Vec<u32>, tx: mpsc::Sender<u32>) {","highlight_start":12,"highlight_end":29}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"Fearless Concurrency/Using Message Passing to Transfer Data Between Threads/Sum All Numbers/src/main.rs","byte_start":94,"byte_end":115,"line_start":5,"line_end":5,"column_start":31,"column_end":52,"is_primary":false,"text":[{"text":"fn send_tx(numbers: Vec<u32>, tx: mpsc::Sender<u32>) {","highlight_start":31,"highlight_end":52}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"Fearless Concurrency/Using Message Passing to Transfer Data Between Threads/Sum All Numbers/src/main.rs","byte_start":67,"byte_end":74,"line_start":5,"line_end":5,"column_start":4,"column_end":11,"is_primary":true,"text":[{"text":"fn send_tx(numbers: Vec<u32>, tx: mpsc::Sender<u32>) {","highlight_start":4,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"Fearless Concurrency/Using Message Passing to Transfer Data Between Threads/Sum All Numbers/src/main.rs","byte_start":461,"byte_end":517,"line_start":19,"line_end":19,"column_start":12,"column_end":68,"is_primary":true,"text":[{"text":"    send_tx(vec![1,3,5,7,9], /* TODO: pass the transmitting end */);","highlight_start":12,"highlight_end":68}],"label":null,"suggested_replacement":"(vec![1,3,5,7,9], /* Sender<u32> */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 2 arguments but 1 argument was supplied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mFearless Concurrency/Using Message Passing to Transfer Data Between Threads/Sum All Numbers/src/main.rs:19:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    send_tx(vec![1,3,5,7,9], /* TODO: pass the transmitting end */);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12margument #2 of type `Sender<u32>` is missing\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mFearless Concurrency/Using Message Passing to Transfer Data Between Threads/Sum All Numbers/src/main.rs:5:4\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn send_tx(numbers: Vec<u32>, tx: mpsc::Sender<u32>) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    send_tx\u001b[0m\u001b[0m\u001b[38;5;10m(vec![1,3,5,7,9], /* Sender<u32> */)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0061`.\u001b[0m\n"}
